Terminals unused in grammar

   DECL
   ENDDECL
   SEMICOLON
   COMMA
   INTEGER
   BOOLEAN
   ID
   LSQUARE
   RSQUARE
   TRUE
   FALSE
   ADDRESSOF
   MODULUS
   AND
   OR
   NOT
   READ
   WRITE
   IF
   ENDIF
   THEN
   ELSE
   WHILE
   EQUAL
   ASSIGN
   NEQUAL
   LESS_THAN
   LESS_EQUAL
   GREATER_THAN
   GREATER_EQ
   MINUS
   MULT
   DIVIDE
   LPAREN
   RPAREN
   RFLOWER
   LFLOWER
   DO
   ENDWHILE
   PRINT
   BEGINN
   END
   RETURN
   RECORD
   MAIN


Grammar

    0 $accept: program $end

    1 program: expression

    2 expression: NUMBER
    3           | expression PLUS expression


Terminals, with rules where they appear

$end (0) 0
error (256)
DECL (258)
ENDDECL (259)
SEMICOLON (260)
COMMA (261)
INTEGER (262)
BOOLEAN (263)
ID (264)
LSQUARE (265)
RSQUARE (266)
TRUE (267)
FALSE (268)
ADDRESSOF (269)
MODULUS (270)
AND (271)
OR (272)
NOT (273)
READ (274)
WRITE (275)
IF (276)
ENDIF (277)
THEN (278)
ELSE (279)
WHILE (280)
NUMBER (281) 2
EQUAL (282)
ASSIGN (283)
NEQUAL (284)
LESS_THAN (285)
LESS_EQUAL (286)
GREATER_THAN (287)
GREATER_EQ (288)
PLUS (289) 3
MINUS (290)
MULT (291)
DIVIDE (292)
LPAREN (293)
RPAREN (294)
RFLOWER (295)
LFLOWER (296)
DO (297)
ENDWHILE (298)
PRINT (299)
BEGINN (300)
END (301)
RETURN (302)
RECORD (303)
MAIN (304)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1, on right: 0
expression (52)
    on left: 2 3, on right: 1 3


state 0

    0 $accept: . program $end

    NUMBER  shift, and go to state 1

    program     go to state 2
    expression  go to state 3


state 1

    2 expression: NUMBER .

    $default  reduce using rule 2 (expression)


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: expression .
    3 expression: expression . PLUS expression

    PLUS  shift, and go to state 5

    $default  reduce using rule 1 (program)


state 4

    0 $accept: program $end .

    $default  accept


state 5

    3 expression: expression PLUS . expression

    NUMBER  shift, and go to state 1

    expression  go to state 6


state 6

    3 expression: expression . PLUS expression
    3           | expression PLUS expression .

    $default  reduce using rule 3 (expression)
